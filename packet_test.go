package radigo

import (
	"reflect"
	"testing"
)

func TestPacketDecode(t *testing.T) {
	// sample packet taken out of RFC2865
	encdPkt := []byte{
		0x01, 0x01, 0x00, 0x47, 0x2a, 0xee, 0x86, 0xf0, 0x8d, 0x0d, 0x55, 0x96, 0x9c, 0xa5, 0x97, 0x8e,
		0x0d, 0x33, 0x67, 0xa2, 0x01, 0x08, 0x66, 0x6c, 0x6f, 0x70, 0x73, 0x79, 0x03, 0x13, 0x16, 0xe9,
		0x75, 0x57, 0xc3, 0x16, 0x18, 0x58, 0x95, 0xf2, 0x93, 0xff, 0x63, 0x44, 0x07, 0x72, 0x75, 0x04,
		0x06, 0xc0, 0xa8, 0x01, 0x10, 0x05, 0x06, 0x00, 0x00, 0x00, 0x14, 0x06, 0x06, 0x00, 0x00, 0x00,
		0x02, 0x07, 0x06, 0x00, 0x00, 0x00, 0x01,
	}
	ePkt := &Packet{
		Code:       AccessRequest,
		Identifier: 1,
		Authenticator: [16]byte{0x2a, 0xee, 0x86, 0xf0, 0x8d, 0x0d, 0x55, 0x96, 0x9c, 0xa5, 0x97, 0x8e,
			0x0d, 0x33, 0x67, 0xa2},
		AVPs: []*AVP{
			&AVP{
				Type:  UserName,
				Value: []byte{0x66, 0x6c, 0x6f, 0x70, 0x73, 0x79}, // flopsy
			},
			&AVP{
				Type: CHAPPassword,
				Value: []byte{0x16, 0xe9,
					0x75, 0x57, 0xc3, 0x16, 0x18, 0x58, 0x95, 0xf2, 0x93, 0xff, 0x63, 0x44, 0x07, 0x72, 0x75}, // 3
			},
			&AVP{
				Type:  NASIPAddress,
				Value: []byte{0xc0, 0xa8, 0x01, 0x10}, // 192.168.1.16
			},
			&AVP{
				Type:  NASPort,
				Value: []byte{0x00, 0x00, 0x00, 0x14}, // 20
			},
			&AVP{
				Type:  ServiceType,
				Value: []byte{0x00, 0x00, 0x00, 0x02}, // 2
			},
			&AVP{
				Type:  FramedProtocol,
				Value: []byte{0x00, 0x00, 0x00, 0x01}, // 1
			},
		},
	}
	pkt := new(Packet)
	if err := pkt.Decode(encdPkt); err != nil {
		t.Error(err)
	}

	if !reflect.DeepEqual(ePkt, pkt) {
		t.Errorf("Expecting: %+v, received: %+v", ePkt, pkt)
	}
}
